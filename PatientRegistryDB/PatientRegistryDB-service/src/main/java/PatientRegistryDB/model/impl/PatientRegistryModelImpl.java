/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package PatientRegistryDB.model.impl;

import PatientRegistryDB.model.PatientRegistry;
import PatientRegistryDB.model.PatientRegistryModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the PatientRegistry service. Represents a row in the &quot;a_PatientRegistry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PatientRegistryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PatientRegistryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PatientRegistryImpl
 * @generated
 */
@JSON(strict = true)
public class PatientRegistryModelImpl
	extends BaseModelImpl<PatientRegistry> implements PatientRegistryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a patient registry model instance should use the <code>PatientRegistry</code> interface instead.
	 */
	public static final String TABLE_NAME = "a_PatientRegistry";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"patientId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"firstName", Types.VARCHAR}, {"lastName", Types.VARCHAR},
		{"dateOfBirth", Types.TIMESTAMP}, {"gender", Types.VARCHAR},
		{"contactNumber", Types.VARCHAR}, {"email", Types.VARCHAR},
		{"address", Types.VARCHAR}, {"city", Types.VARCHAR},
		{"state_", Types.VARCHAR}, {"pincode", Types.VARCHAR},
		{"emergencyContactName", Types.VARCHAR},
		{"emergencyContactNumber", Types.VARCHAR},
		{"bloodGroup", Types.VARCHAR}, {"medicalHistory", Types.VARCHAR},
		{"allergies", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("patientId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateOfBirth", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("gender", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pincode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emergencyContactName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emergencyContactNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bloodGroup", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("medicalHistory", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("allergies", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table a_PatientRegistry (uuid_ VARCHAR(75) null,patientId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,firstName VARCHAR(75) null,lastName VARCHAR(75) null,dateOfBirth DATE null,gender VARCHAR(75) null,contactNumber VARCHAR(75) null,email VARCHAR(75) null,address VARCHAR(75) null,city VARCHAR(75) null,state_ VARCHAR(75) null,pincode VARCHAR(75) null,emergencyContactName VARCHAR(75) null,emergencyContactNumber VARCHAR(75) null,bloodGroup VARCHAR(75) null,medicalHistory VARCHAR(75) null,allergies VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table a_PatientRegistry";

	public static final String ORDER_BY_JPQL =
		" ORDER BY patientRegistry.firstName ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY a_PatientRegistry.firstName ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FIRSTNAME_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public PatientRegistryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _patientId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPatientId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _patientId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PatientRegistry.class;
	}

	@Override
	public String getModelClassName() {
		return PatientRegistry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<PatientRegistry, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<PatientRegistry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PatientRegistry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((PatientRegistry)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<PatientRegistry, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<PatientRegistry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(PatientRegistry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<PatientRegistry, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<PatientRegistry, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<PatientRegistry, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<PatientRegistry, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<PatientRegistry, Object>>();

			attributeGetterFunctions.put("uuid", PatientRegistry::getUuid);
			attributeGetterFunctions.put(
				"patientId", PatientRegistry::getPatientId);
			attributeGetterFunctions.put(
				"groupId", PatientRegistry::getGroupId);
			attributeGetterFunctions.put(
				"companyId", PatientRegistry::getCompanyId);
			attributeGetterFunctions.put("userId", PatientRegistry::getUserId);
			attributeGetterFunctions.put(
				"userName", PatientRegistry::getUserName);
			attributeGetterFunctions.put(
				"createDate", PatientRegistry::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", PatientRegistry::getModifiedDate);
			attributeGetterFunctions.put(
				"firstName", PatientRegistry::getFirstName);
			attributeGetterFunctions.put(
				"lastName", PatientRegistry::getLastName);
			attributeGetterFunctions.put(
				"dateOfBirth", PatientRegistry::getDateOfBirth);
			attributeGetterFunctions.put("gender", PatientRegistry::getGender);
			attributeGetterFunctions.put(
				"contactNumber", PatientRegistry::getContactNumber);
			attributeGetterFunctions.put("email", PatientRegistry::getEmail);
			attributeGetterFunctions.put(
				"address", PatientRegistry::getAddress);
			attributeGetterFunctions.put("city", PatientRegistry::getCity);
			attributeGetterFunctions.put("state", PatientRegistry::getState);
			attributeGetterFunctions.put(
				"pincode", PatientRegistry::getPincode);
			attributeGetterFunctions.put(
				"emergencyContactName",
				PatientRegistry::getEmergencyContactName);
			attributeGetterFunctions.put(
				"emergencyContactNumber",
				PatientRegistry::getEmergencyContactNumber);
			attributeGetterFunctions.put(
				"bloodGroup", PatientRegistry::getBloodGroup);
			attributeGetterFunctions.put(
				"medicalHistory", PatientRegistry::getMedicalHistory);
			attributeGetterFunctions.put(
				"allergies", PatientRegistry::getAllergies);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<PatientRegistry, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<PatientRegistry, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<PatientRegistry, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<PatientRegistry, String>)PatientRegistry::setUuid);
			attributeSetterBiConsumers.put(
				"patientId",
				(BiConsumer<PatientRegistry, Long>)
					PatientRegistry::setPatientId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<PatientRegistry, Long>)PatientRegistry::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<PatientRegistry, Long>)
					PatientRegistry::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<PatientRegistry, Long>)PatientRegistry::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<PatientRegistry, String>)
					PatientRegistry::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<PatientRegistry, Date>)
					PatientRegistry::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<PatientRegistry, Date>)
					PatientRegistry::setModifiedDate);
			attributeSetterBiConsumers.put(
				"firstName",
				(BiConsumer<PatientRegistry, String>)
					PatientRegistry::setFirstName);
			attributeSetterBiConsumers.put(
				"lastName",
				(BiConsumer<PatientRegistry, String>)
					PatientRegistry::setLastName);
			attributeSetterBiConsumers.put(
				"dateOfBirth",
				(BiConsumer<PatientRegistry, Date>)
					PatientRegistry::setDateOfBirth);
			attributeSetterBiConsumers.put(
				"gender",
				(BiConsumer<PatientRegistry, String>)
					PatientRegistry::setGender);
			attributeSetterBiConsumers.put(
				"contactNumber",
				(BiConsumer<PatientRegistry, String>)
					PatientRegistry::setContactNumber);
			attributeSetterBiConsumers.put(
				"email",
				(BiConsumer<PatientRegistry, String>)PatientRegistry::setEmail);
			attributeSetterBiConsumers.put(
				"address",
				(BiConsumer<PatientRegistry, String>)
					PatientRegistry::setAddress);
			attributeSetterBiConsumers.put(
				"city",
				(BiConsumer<PatientRegistry, String>)PatientRegistry::setCity);
			attributeSetterBiConsumers.put(
				"state",
				(BiConsumer<PatientRegistry, String>)PatientRegistry::setState);
			attributeSetterBiConsumers.put(
				"pincode",
				(BiConsumer<PatientRegistry, String>)
					PatientRegistry::setPincode);
			attributeSetterBiConsumers.put(
				"emergencyContactName",
				(BiConsumer<PatientRegistry, String>)
					PatientRegistry::setEmergencyContactName);
			attributeSetterBiConsumers.put(
				"emergencyContactNumber",
				(BiConsumer<PatientRegistry, String>)
					PatientRegistry::setEmergencyContactNumber);
			attributeSetterBiConsumers.put(
				"bloodGroup",
				(BiConsumer<PatientRegistry, String>)
					PatientRegistry::setBloodGroup);
			attributeSetterBiConsumers.put(
				"medicalHistory",
				(BiConsumer<PatientRegistry, String>)
					PatientRegistry::setMedicalHistory);
			attributeSetterBiConsumers.put(
				"allergies",
				(BiConsumer<PatientRegistry, String>)
					PatientRegistry::setAllergies);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getPatientId() {
		return _patientId;
	}

	@Override
	public void setPatientId(long patientId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_patientId = patientId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return "";
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firstName = firstName;
	}

	@JSON
	@Override
	public String getLastName() {
		if (_lastName == null) {
			return "";
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastName = lastName;
	}

	@JSON
	@Override
	public Date getDateOfBirth() {
		return _dateOfBirth;
	}

	@Override
	public void setDateOfBirth(Date dateOfBirth) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfBirth = dateOfBirth;
	}

	@JSON
	@Override
	public String getGender() {
		if (_gender == null) {
			return "";
		}
		else {
			return _gender;
		}
	}

	@Override
	public void setGender(String gender) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gender = gender;
	}

	@JSON
	@Override
	public String getContactNumber() {
		if (_contactNumber == null) {
			return "";
		}
		else {
			return _contactNumber;
		}
	}

	@Override
	public void setContactNumber(String contactNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contactNumber = contactNumber;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_address = address;
	}

	@JSON
	@Override
	public String getCity() {
		if (_city == null) {
			return "";
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_city = city;
	}

	@JSON
	@Override
	public String getState() {
		if (_state == null) {
			return "";
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_state = state;
	}

	@JSON
	@Override
	public String getPincode() {
		if (_pincode == null) {
			return "";
		}
		else {
			return _pincode;
		}
	}

	@Override
	public void setPincode(String pincode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pincode = pincode;
	}

	@JSON
	@Override
	public String getEmergencyContactName() {
		if (_emergencyContactName == null) {
			return "";
		}
		else {
			return _emergencyContactName;
		}
	}

	@Override
	public void setEmergencyContactName(String emergencyContactName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emergencyContactName = emergencyContactName;
	}

	@JSON
	@Override
	public String getEmergencyContactNumber() {
		if (_emergencyContactNumber == null) {
			return "";
		}
		else {
			return _emergencyContactNumber;
		}
	}

	@Override
	public void setEmergencyContactNumber(String emergencyContactNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emergencyContactNumber = emergencyContactNumber;
	}

	@JSON
	@Override
	public String getBloodGroup() {
		if (_bloodGroup == null) {
			return "";
		}
		else {
			return _bloodGroup;
		}
	}

	@Override
	public void setBloodGroup(String bloodGroup) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bloodGroup = bloodGroup;
	}

	@JSON
	@Override
	public String getMedicalHistory() {
		if (_medicalHistory == null) {
			return "";
		}
		else {
			return _medicalHistory;
		}
	}

	@Override
	public void setMedicalHistory(String medicalHistory) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_medicalHistory = medicalHistory;
	}

	@JSON
	@Override
	public String getAllergies() {
		if (_allergies == null) {
			return "";
		}
		else {
			return _allergies;
		}
	}

	@Override
	public void setAllergies(String allergies) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_allergies = allergies;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(PatientRegistry.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), PatientRegistry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PatientRegistry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, PatientRegistry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PatientRegistryImpl patientRegistryImpl = new PatientRegistryImpl();

		patientRegistryImpl.setUuid(getUuid());
		patientRegistryImpl.setPatientId(getPatientId());
		patientRegistryImpl.setGroupId(getGroupId());
		patientRegistryImpl.setCompanyId(getCompanyId());
		patientRegistryImpl.setUserId(getUserId());
		patientRegistryImpl.setUserName(getUserName());
		patientRegistryImpl.setCreateDate(getCreateDate());
		patientRegistryImpl.setModifiedDate(getModifiedDate());
		patientRegistryImpl.setFirstName(getFirstName());
		patientRegistryImpl.setLastName(getLastName());
		patientRegistryImpl.setDateOfBirth(getDateOfBirth());
		patientRegistryImpl.setGender(getGender());
		patientRegistryImpl.setContactNumber(getContactNumber());
		patientRegistryImpl.setEmail(getEmail());
		patientRegistryImpl.setAddress(getAddress());
		patientRegistryImpl.setCity(getCity());
		patientRegistryImpl.setState(getState());
		patientRegistryImpl.setPincode(getPincode());
		patientRegistryImpl.setEmergencyContactName(getEmergencyContactName());
		patientRegistryImpl.setEmergencyContactNumber(
			getEmergencyContactNumber());
		patientRegistryImpl.setBloodGroup(getBloodGroup());
		patientRegistryImpl.setMedicalHistory(getMedicalHistory());
		patientRegistryImpl.setAllergies(getAllergies());

		patientRegistryImpl.resetOriginalValues();

		return patientRegistryImpl;
	}

	@Override
	public PatientRegistry cloneWithOriginalValues() {
		PatientRegistryImpl patientRegistryImpl = new PatientRegistryImpl();

		patientRegistryImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		patientRegistryImpl.setPatientId(
			this.<Long>getColumnOriginalValue("patientId"));
		patientRegistryImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		patientRegistryImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		patientRegistryImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		patientRegistryImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		patientRegistryImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		patientRegistryImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		patientRegistryImpl.setFirstName(
			this.<String>getColumnOriginalValue("firstName"));
		patientRegistryImpl.setLastName(
			this.<String>getColumnOriginalValue("lastName"));
		patientRegistryImpl.setDateOfBirth(
			this.<Date>getColumnOriginalValue("dateOfBirth"));
		patientRegistryImpl.setGender(
			this.<String>getColumnOriginalValue("gender"));
		patientRegistryImpl.setContactNumber(
			this.<String>getColumnOriginalValue("contactNumber"));
		patientRegistryImpl.setEmail(
			this.<String>getColumnOriginalValue("email"));
		patientRegistryImpl.setAddress(
			this.<String>getColumnOriginalValue("address"));
		patientRegistryImpl.setCity(
			this.<String>getColumnOriginalValue("city"));
		patientRegistryImpl.setState(
			this.<String>getColumnOriginalValue("state_"));
		patientRegistryImpl.setPincode(
			this.<String>getColumnOriginalValue("pincode"));
		patientRegistryImpl.setEmergencyContactName(
			this.<String>getColumnOriginalValue("emergencyContactName"));
		patientRegistryImpl.setEmergencyContactNumber(
			this.<String>getColumnOriginalValue("emergencyContactNumber"));
		patientRegistryImpl.setBloodGroup(
			this.<String>getColumnOriginalValue("bloodGroup"));
		patientRegistryImpl.setMedicalHistory(
			this.<String>getColumnOriginalValue("medicalHistory"));
		patientRegistryImpl.setAllergies(
			this.<String>getColumnOriginalValue("allergies"));

		return patientRegistryImpl;
	}

	@Override
	public int compareTo(PatientRegistry patientRegistry) {
		int value = 0;

		value = getFirstName().compareTo(patientRegistry.getFirstName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof PatientRegistry)) {
			return false;
		}

		PatientRegistry patientRegistry = (PatientRegistry)object;

		long primaryKey = patientRegistry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<PatientRegistry> toCacheModel() {
		PatientRegistryCacheModel patientRegistryCacheModel =
			new PatientRegistryCacheModel();

		patientRegistryCacheModel.uuid = getUuid();

		String uuid = patientRegistryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			patientRegistryCacheModel.uuid = null;
		}

		patientRegistryCacheModel.patientId = getPatientId();

		patientRegistryCacheModel.groupId = getGroupId();

		patientRegistryCacheModel.companyId = getCompanyId();

		patientRegistryCacheModel.userId = getUserId();

		patientRegistryCacheModel.userName = getUserName();

		String userName = patientRegistryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			patientRegistryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			patientRegistryCacheModel.createDate = createDate.getTime();
		}
		else {
			patientRegistryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			patientRegistryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			patientRegistryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		patientRegistryCacheModel.firstName = getFirstName();

		String firstName = patientRegistryCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			patientRegistryCacheModel.firstName = null;
		}

		patientRegistryCacheModel.lastName = getLastName();

		String lastName = patientRegistryCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			patientRegistryCacheModel.lastName = null;
		}

		Date dateOfBirth = getDateOfBirth();

		if (dateOfBirth != null) {
			patientRegistryCacheModel.dateOfBirth = dateOfBirth.getTime();
		}
		else {
			patientRegistryCacheModel.dateOfBirth = Long.MIN_VALUE;
		}

		patientRegistryCacheModel.gender = getGender();

		String gender = patientRegistryCacheModel.gender;

		if ((gender != null) && (gender.length() == 0)) {
			patientRegistryCacheModel.gender = null;
		}

		patientRegistryCacheModel.contactNumber = getContactNumber();

		String contactNumber = patientRegistryCacheModel.contactNumber;

		if ((contactNumber != null) && (contactNumber.length() == 0)) {
			patientRegistryCacheModel.contactNumber = null;
		}

		patientRegistryCacheModel.email = getEmail();

		String email = patientRegistryCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			patientRegistryCacheModel.email = null;
		}

		patientRegistryCacheModel.address = getAddress();

		String address = patientRegistryCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			patientRegistryCacheModel.address = null;
		}

		patientRegistryCacheModel.city = getCity();

		String city = patientRegistryCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			patientRegistryCacheModel.city = null;
		}

		patientRegistryCacheModel.state = getState();

		String state = patientRegistryCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			patientRegistryCacheModel.state = null;
		}

		patientRegistryCacheModel.pincode = getPincode();

		String pincode = patientRegistryCacheModel.pincode;

		if ((pincode != null) && (pincode.length() == 0)) {
			patientRegistryCacheModel.pincode = null;
		}

		patientRegistryCacheModel.emergencyContactName =
			getEmergencyContactName();

		String emergencyContactName =
			patientRegistryCacheModel.emergencyContactName;

		if ((emergencyContactName != null) &&
			(emergencyContactName.length() == 0)) {

			patientRegistryCacheModel.emergencyContactName = null;
		}

		patientRegistryCacheModel.emergencyContactNumber =
			getEmergencyContactNumber();

		String emergencyContactNumber =
			patientRegistryCacheModel.emergencyContactNumber;

		if ((emergencyContactNumber != null) &&
			(emergencyContactNumber.length() == 0)) {

			patientRegistryCacheModel.emergencyContactNumber = null;
		}

		patientRegistryCacheModel.bloodGroup = getBloodGroup();

		String bloodGroup = patientRegistryCacheModel.bloodGroup;

		if ((bloodGroup != null) && (bloodGroup.length() == 0)) {
			patientRegistryCacheModel.bloodGroup = null;
		}

		patientRegistryCacheModel.medicalHistory = getMedicalHistory();

		String medicalHistory = patientRegistryCacheModel.medicalHistory;

		if ((medicalHistory != null) && (medicalHistory.length() == 0)) {
			patientRegistryCacheModel.medicalHistory = null;
		}

		patientRegistryCacheModel.allergies = getAllergies();

		String allergies = patientRegistryCacheModel.allergies;

		if ((allergies != null) && (allergies.length() == 0)) {
			patientRegistryCacheModel.allergies = null;
		}

		return patientRegistryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<PatientRegistry, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<PatientRegistry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PatientRegistry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((PatientRegistry)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, PatientRegistry>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					PatientRegistry.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _patientId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _firstName;
	private String _lastName;
	private Date _dateOfBirth;
	private String _gender;
	private String _contactNumber;
	private String _email;
	private String _address;
	private String _city;
	private String _state;
	private String _pincode;
	private String _emergencyContactName;
	private String _emergencyContactNumber;
	private String _bloodGroup;
	private String _medicalHistory;
	private String _allergies;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<PatientRegistry, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((PatientRegistry)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("patientId", _patientId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("firstName", _firstName);
		_columnOriginalValues.put("lastName", _lastName);
		_columnOriginalValues.put("dateOfBirth", _dateOfBirth);
		_columnOriginalValues.put("gender", _gender);
		_columnOriginalValues.put("contactNumber", _contactNumber);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put("address", _address);
		_columnOriginalValues.put("city", _city);
		_columnOriginalValues.put("state_", _state);
		_columnOriginalValues.put("pincode", _pincode);
		_columnOriginalValues.put(
			"emergencyContactName", _emergencyContactName);
		_columnOriginalValues.put(
			"emergencyContactNumber", _emergencyContactNumber);
		_columnOriginalValues.put("bloodGroup", _bloodGroup);
		_columnOriginalValues.put("medicalHistory", _medicalHistory);
		_columnOriginalValues.put("allergies", _allergies);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("state_", "state");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("patientId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("firstName", 256L);

		columnBitmasks.put("lastName", 512L);

		columnBitmasks.put("dateOfBirth", 1024L);

		columnBitmasks.put("gender", 2048L);

		columnBitmasks.put("contactNumber", 4096L);

		columnBitmasks.put("email", 8192L);

		columnBitmasks.put("address", 16384L);

		columnBitmasks.put("city", 32768L);

		columnBitmasks.put("state_", 65536L);

		columnBitmasks.put("pincode", 131072L);

		columnBitmasks.put("emergencyContactName", 262144L);

		columnBitmasks.put("emergencyContactNumber", 524288L);

		columnBitmasks.put("bloodGroup", 1048576L);

		columnBitmasks.put("medicalHistory", 2097152L);

		columnBitmasks.put("allergies", 4194304L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private PatientRegistry _escapedModel;

}