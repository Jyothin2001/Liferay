/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package LoanDB.model.impl;

import LoanDB.model.CustomerTable;
import LoanDB.model.CustomerTableModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CustomerTable service. Represents a row in the &quot;B_CustomerTable&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CustomerTableModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CustomerTableImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CustomerTableImpl
 * @generated
 */
public class CustomerTableModelImpl
	extends BaseModelImpl<CustomerTable> implements CustomerTableModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a customer table model instance should use the <code>CustomerTable</code> interface instead.
	 */
	public static final String TABLE_NAME = "B_CustomerTable";

	public static final Object[][] TABLE_COLUMNS = {
		{"customerId", Types.BIGINT}, {"name", Types.VARCHAR},
		{"email", Types.VARCHAR}, {"phone", Types.VARCHAR},
		{"dob", Types.TIMESTAMP}, {"aadharNumber", Types.VARCHAR},
		{"panNumber", Types.VARCHAR}, {"address", Types.VARCHAR},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("customerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("phone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dob", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("aadharNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("panNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table B_CustomerTable (customerId LONG not null primary key,name VARCHAR(75) null,email VARCHAR(75) null,phone VARCHAR(75) null,dob DATE null,aadharNumber VARCHAR(75) null,panNumber VARCHAR(75) null,address VARCHAR(75) null,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table B_CustomerTable";

	public static final String ORDER_BY_JPQL =
		" ORDER BY customerTable.name ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY B_CustomerTable.name ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NAME_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CustomerTableModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _customerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCustomerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _customerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CustomerTable.class;
	}

	@Override
	public String getModelClassName() {
		return CustomerTable.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CustomerTable, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CustomerTable, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CustomerTable, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CustomerTable)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CustomerTable, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CustomerTable, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CustomerTable)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CustomerTable, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CustomerTable, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<CustomerTable, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<CustomerTable, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<CustomerTable, Object>>();

			attributeGetterFunctions.put(
				"customerId", CustomerTable::getCustomerId);
			attributeGetterFunctions.put("name", CustomerTable::getName);
			attributeGetterFunctions.put("email", CustomerTable::getEmail);
			attributeGetterFunctions.put("phone", CustomerTable::getPhone);
			attributeGetterFunctions.put("dob", CustomerTable::getDob);
			attributeGetterFunctions.put(
				"aadharNumber", CustomerTable::getAadharNumber);
			attributeGetterFunctions.put(
				"panNumber", CustomerTable::getPanNumber);
			attributeGetterFunctions.put("address", CustomerTable::getAddress);
			attributeGetterFunctions.put(
				"companyId", CustomerTable::getCompanyId);
			attributeGetterFunctions.put("userId", CustomerTable::getUserId);
			attributeGetterFunctions.put(
				"userName", CustomerTable::getUserName);
			attributeGetterFunctions.put(
				"createDate", CustomerTable::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", CustomerTable::getModifiedDate);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<CustomerTable, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<CustomerTable, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<CustomerTable, ?>>();

			attributeSetterBiConsumers.put(
				"customerId",
				(BiConsumer<CustomerTable, Long>)CustomerTable::setCustomerId);
			attributeSetterBiConsumers.put(
				"name",
				(BiConsumer<CustomerTable, String>)CustomerTable::setName);
			attributeSetterBiConsumers.put(
				"email",
				(BiConsumer<CustomerTable, String>)CustomerTable::setEmail);
			attributeSetterBiConsumers.put(
				"phone",
				(BiConsumer<CustomerTable, String>)CustomerTable::setPhone);
			attributeSetterBiConsumers.put(
				"dob", (BiConsumer<CustomerTable, Date>)CustomerTable::setDob);
			attributeSetterBiConsumers.put(
				"aadharNumber",
				(BiConsumer<CustomerTable, String>)
					CustomerTable::setAadharNumber);
			attributeSetterBiConsumers.put(
				"panNumber",
				(BiConsumer<CustomerTable, String>)CustomerTable::setPanNumber);
			attributeSetterBiConsumers.put(
				"address",
				(BiConsumer<CustomerTable, String>)CustomerTable::setAddress);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<CustomerTable, Long>)CustomerTable::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<CustomerTable, Long>)CustomerTable::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<CustomerTable, String>)CustomerTable::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<CustomerTable, Date>)CustomerTable::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<CustomerTable, Date>)
					CustomerTable::setModifiedDate);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@Override
	public long getCustomerId() {
		return _customerId;
	}

	@Override
	public void setCustomerId(long customerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customerId = customerId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	@Override
	public String getPhone() {
		if (_phone == null) {
			return "";
		}
		else {
			return _phone;
		}
	}

	@Override
	public void setPhone(String phone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_phone = phone;
	}

	@Override
	public Date getDob() {
		return _dob;
	}

	@Override
	public void setDob(Date dob) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dob = dob;
	}

	@Override
	public String getAadharNumber() {
		if (_aadharNumber == null) {
			return "";
		}
		else {
			return _aadharNumber;
		}
	}

	@Override
	public void setAadharNumber(String aadharNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_aadharNumber = aadharNumber;
	}

	@Override
	public String getPanNumber() {
		if (_panNumber == null) {
			return "";
		}
		else {
			return _panNumber;
		}
	}

	@Override
	public void setPanNumber(String panNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_panNumber = panNumber;
	}

	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_address = address;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CustomerTable.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CustomerTable toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CustomerTable>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CustomerTableImpl customerTableImpl = new CustomerTableImpl();

		customerTableImpl.setCustomerId(getCustomerId());
		customerTableImpl.setName(getName());
		customerTableImpl.setEmail(getEmail());
		customerTableImpl.setPhone(getPhone());
		customerTableImpl.setDob(getDob());
		customerTableImpl.setAadharNumber(getAadharNumber());
		customerTableImpl.setPanNumber(getPanNumber());
		customerTableImpl.setAddress(getAddress());
		customerTableImpl.setCompanyId(getCompanyId());
		customerTableImpl.setUserId(getUserId());
		customerTableImpl.setUserName(getUserName());
		customerTableImpl.setCreateDate(getCreateDate());
		customerTableImpl.setModifiedDate(getModifiedDate());

		customerTableImpl.resetOriginalValues();

		return customerTableImpl;
	}

	@Override
	public CustomerTable cloneWithOriginalValues() {
		CustomerTableImpl customerTableImpl = new CustomerTableImpl();

		customerTableImpl.setCustomerId(
			this.<Long>getColumnOriginalValue("customerId"));
		customerTableImpl.setName(this.<String>getColumnOriginalValue("name"));
		customerTableImpl.setEmail(
			this.<String>getColumnOriginalValue("email"));
		customerTableImpl.setPhone(
			this.<String>getColumnOriginalValue("phone"));
		customerTableImpl.setDob(this.<Date>getColumnOriginalValue("dob"));
		customerTableImpl.setAadharNumber(
			this.<String>getColumnOriginalValue("aadharNumber"));
		customerTableImpl.setPanNumber(
			this.<String>getColumnOriginalValue("panNumber"));
		customerTableImpl.setAddress(
			this.<String>getColumnOriginalValue("address"));
		customerTableImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		customerTableImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		customerTableImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		customerTableImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		customerTableImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));

		return customerTableImpl;
	}

	@Override
	public int compareTo(CustomerTable customerTable) {
		int value = 0;

		value = getName().compareTo(customerTable.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CustomerTable)) {
			return false;
		}

		CustomerTable customerTable = (CustomerTable)object;

		long primaryKey = customerTable.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CustomerTable> toCacheModel() {
		CustomerTableCacheModel customerTableCacheModel =
			new CustomerTableCacheModel();

		customerTableCacheModel.customerId = getCustomerId();

		customerTableCacheModel.name = getName();

		String name = customerTableCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			customerTableCacheModel.name = null;
		}

		customerTableCacheModel.email = getEmail();

		String email = customerTableCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			customerTableCacheModel.email = null;
		}

		customerTableCacheModel.phone = getPhone();

		String phone = customerTableCacheModel.phone;

		if ((phone != null) && (phone.length() == 0)) {
			customerTableCacheModel.phone = null;
		}

		Date dob = getDob();

		if (dob != null) {
			customerTableCacheModel.dob = dob.getTime();
		}
		else {
			customerTableCacheModel.dob = Long.MIN_VALUE;
		}

		customerTableCacheModel.aadharNumber = getAadharNumber();

		String aadharNumber = customerTableCacheModel.aadharNumber;

		if ((aadharNumber != null) && (aadharNumber.length() == 0)) {
			customerTableCacheModel.aadharNumber = null;
		}

		customerTableCacheModel.panNumber = getPanNumber();

		String panNumber = customerTableCacheModel.panNumber;

		if ((panNumber != null) && (panNumber.length() == 0)) {
			customerTableCacheModel.panNumber = null;
		}

		customerTableCacheModel.address = getAddress();

		String address = customerTableCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			customerTableCacheModel.address = null;
		}

		customerTableCacheModel.companyId = getCompanyId();

		customerTableCacheModel.userId = getUserId();

		customerTableCacheModel.userName = getUserName();

		String userName = customerTableCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			customerTableCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			customerTableCacheModel.createDate = createDate.getTime();
		}
		else {
			customerTableCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			customerTableCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			customerTableCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return customerTableCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CustomerTable, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CustomerTable, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CustomerTable, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((CustomerTable)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CustomerTable>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					CustomerTable.class, ModelWrapper.class);

	}

	private long _customerId;
	private String _name;
	private String _email;
	private String _phone;
	private Date _dob;
	private String _aadharNumber;
	private String _panNumber;
	private String _address;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;

	public <T> T getColumnValue(String columnName) {
		Function<CustomerTable, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CustomerTable)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("customerId", _customerId);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put("phone", _phone);
		_columnOriginalValues.put("dob", _dob);
		_columnOriginalValues.put("aadharNumber", _aadharNumber);
		_columnOriginalValues.put("panNumber", _panNumber);
		_columnOriginalValues.put("address", _address);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("customerId", 1L);

		columnBitmasks.put("name", 2L);

		columnBitmasks.put("email", 4L);

		columnBitmasks.put("phone", 8L);

		columnBitmasks.put("dob", 16L);

		columnBitmasks.put("aadharNumber", 32L);

		columnBitmasks.put("panNumber", 64L);

		columnBitmasks.put("address", 128L);

		columnBitmasks.put("companyId", 256L);

		columnBitmasks.put("userId", 512L);

		columnBitmasks.put("userName", 1024L);

		columnBitmasks.put("createDate", 2048L);

		columnBitmasks.put("modifiedDate", 4096L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CustomerTable _escapedModel;

}