/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package LoanDB.model.impl;

import LoanDB.model.LoanTable;
import LoanDB.model.LoanTableModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the LoanTable service. Represents a row in the &quot;B_LoanTable&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>LoanTableModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LoanTableImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LoanTableImpl
 * @generated
 */
@JSON(strict = true)
public class LoanTableModelImpl
	extends BaseModelImpl<LoanTable> implements LoanTableModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a loan table model instance should use the <code>LoanTable</code> interface instead.
	 */
	public static final String TABLE_NAME = "B_LoanTable";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"LoanId", Types.BIGINT},
		{"customerId", Types.BIGINT}, {"loanType", Types.VARCHAR},
		{"amount", Types.DOUBLE}, {"status", Types.VARCHAR},
		{"applicationDate", Types.TIMESTAMP}, {"interestRate", Types.DOUBLE},
		{"tenure", Types.INTEGER}, {"remarks", Types.VARCHAR},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("LoanId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("customerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("loanType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("amount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("interestRate", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("tenure", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("remarks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table B_LoanTable (uuid_ VARCHAR(75) null,LoanId LONG not null primary key,customerId LONG,loanType VARCHAR(75) null,amount DOUBLE,status VARCHAR(75) null,applicationDate DATE null,interestRate DOUBLE,tenure INTEGER,remarks VARCHAR(75) null,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table B_LoanTable";

	public static final String ORDER_BY_JPQL =
		" ORDER BY loanTable.loanType ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY B_LoanTable.loanType ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CUSTOMERID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long LOANTYPE_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public LoanTableModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _LoanId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLoanId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _LoanId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LoanTable.class;
	}

	@Override
	public String getModelClassName() {
		return LoanTable.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<LoanTable, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<LoanTable, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LoanTable, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((LoanTable)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<LoanTable, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<LoanTable, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(LoanTable)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<LoanTable, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<LoanTable, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<LoanTable, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<LoanTable, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<LoanTable, Object>>();

			attributeGetterFunctions.put("uuid", LoanTable::getUuid);
			attributeGetterFunctions.put("LoanId", LoanTable::getLoanId);
			attributeGetterFunctions.put(
				"customerId", LoanTable::getCustomerId);
			attributeGetterFunctions.put("loanType", LoanTable::getLoanType);
			attributeGetterFunctions.put("amount", LoanTable::getAmount);
			attributeGetterFunctions.put("status", LoanTable::getStatus);
			attributeGetterFunctions.put(
				"applicationDate", LoanTable::getApplicationDate);
			attributeGetterFunctions.put(
				"interestRate", LoanTable::getInterestRate);
			attributeGetterFunctions.put("tenure", LoanTable::getTenure);
			attributeGetterFunctions.put("remarks", LoanTable::getRemarks);
			attributeGetterFunctions.put("companyId", LoanTable::getCompanyId);
			attributeGetterFunctions.put("userId", LoanTable::getUserId);
			attributeGetterFunctions.put("userName", LoanTable::getUserName);
			attributeGetterFunctions.put(
				"createDate", LoanTable::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", LoanTable::getModifiedDate);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<LoanTable, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<LoanTable, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<LoanTable, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<LoanTable, String>)LoanTable::setUuid);
			attributeSetterBiConsumers.put(
				"LoanId", (BiConsumer<LoanTable, Long>)LoanTable::setLoanId);
			attributeSetterBiConsumers.put(
				"customerId",
				(BiConsumer<LoanTable, Long>)LoanTable::setCustomerId);
			attributeSetterBiConsumers.put(
				"loanType",
				(BiConsumer<LoanTable, String>)LoanTable::setLoanType);
			attributeSetterBiConsumers.put(
				"amount", (BiConsumer<LoanTable, Double>)LoanTable::setAmount);
			attributeSetterBiConsumers.put(
				"status", (BiConsumer<LoanTable, String>)LoanTable::setStatus);
			attributeSetterBiConsumers.put(
				"applicationDate",
				(BiConsumer<LoanTable, Date>)LoanTable::setApplicationDate);
			attributeSetterBiConsumers.put(
				"interestRate",
				(BiConsumer<LoanTable, Double>)LoanTable::setInterestRate);
			attributeSetterBiConsumers.put(
				"tenure", (BiConsumer<LoanTable, Integer>)LoanTable::setTenure);
			attributeSetterBiConsumers.put(
				"remarks",
				(BiConsumer<LoanTable, String>)LoanTable::setRemarks);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<LoanTable, Long>)LoanTable::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId", (BiConsumer<LoanTable, Long>)LoanTable::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<LoanTable, String>)LoanTable::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<LoanTable, Date>)LoanTable::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<LoanTable, Date>)LoanTable::setModifiedDate);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getLoanId() {
		return _LoanId;
	}

	@Override
	public void setLoanId(long LoanId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_LoanId = LoanId;
	}

	@JSON
	@Override
	public long getCustomerId() {
		return _customerId;
	}

	@Override
	public void setCustomerId(long customerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customerId = customerId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCustomerId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("customerId"));
	}

	@JSON
	@Override
	public String getLoanType() {
		if (_loanType == null) {
			return "";
		}
		else {
			return _loanType;
		}
	}

	@Override
	public void setLoanType(String loanType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_loanType = loanType;
	}

	@JSON
	@Override
	public double getAmount() {
		return _amount;
	}

	@Override
	public void setAmount(double amount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_amount = amount;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public Date getApplicationDate() {
		return _applicationDate;
	}

	@Override
	public void setApplicationDate(Date applicationDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationDate = applicationDate;
	}

	@JSON
	@Override
	public double getInterestRate() {
		return _interestRate;
	}

	@Override
	public void setInterestRate(double interestRate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_interestRate = interestRate;
	}

	@JSON
	@Override
	public int getTenure() {
		return _tenure;
	}

	@Override
	public void setTenure(int tenure) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tenure = tenure;
	}

	@JSON
	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return "";
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_remarks = remarks;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(LoanTable.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), LoanTable.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LoanTable toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, LoanTable>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LoanTableImpl loanTableImpl = new LoanTableImpl();

		loanTableImpl.setUuid(getUuid());
		loanTableImpl.setLoanId(getLoanId());
		loanTableImpl.setCustomerId(getCustomerId());
		loanTableImpl.setLoanType(getLoanType());
		loanTableImpl.setAmount(getAmount());
		loanTableImpl.setStatus(getStatus());
		loanTableImpl.setApplicationDate(getApplicationDate());
		loanTableImpl.setInterestRate(getInterestRate());
		loanTableImpl.setTenure(getTenure());
		loanTableImpl.setRemarks(getRemarks());
		loanTableImpl.setCompanyId(getCompanyId());
		loanTableImpl.setUserId(getUserId());
		loanTableImpl.setUserName(getUserName());
		loanTableImpl.setCreateDate(getCreateDate());
		loanTableImpl.setModifiedDate(getModifiedDate());

		loanTableImpl.resetOriginalValues();

		return loanTableImpl;
	}

	@Override
	public LoanTable cloneWithOriginalValues() {
		LoanTableImpl loanTableImpl = new LoanTableImpl();

		loanTableImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		loanTableImpl.setLoanId(this.<Long>getColumnOriginalValue("LoanId"));
		loanTableImpl.setCustomerId(
			this.<Long>getColumnOriginalValue("customerId"));
		loanTableImpl.setLoanType(
			this.<String>getColumnOriginalValue("loanType"));
		loanTableImpl.setAmount(this.<Double>getColumnOriginalValue("amount"));
		loanTableImpl.setStatus(this.<String>getColumnOriginalValue("status"));
		loanTableImpl.setApplicationDate(
			this.<Date>getColumnOriginalValue("applicationDate"));
		loanTableImpl.setInterestRate(
			this.<Double>getColumnOriginalValue("interestRate"));
		loanTableImpl.setTenure(this.<Integer>getColumnOriginalValue("tenure"));
		loanTableImpl.setRemarks(
			this.<String>getColumnOriginalValue("remarks"));
		loanTableImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		loanTableImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		loanTableImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		loanTableImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		loanTableImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));

		return loanTableImpl;
	}

	@Override
	public int compareTo(LoanTable loanTable) {
		int value = 0;

		value = getLoanType().compareTo(loanTable.getLoanType());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof LoanTable)) {
			return false;
		}

		LoanTable loanTable = (LoanTable)object;

		long primaryKey = loanTable.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<LoanTable> toCacheModel() {
		LoanTableCacheModel loanTableCacheModel = new LoanTableCacheModel();

		loanTableCacheModel.uuid = getUuid();

		String uuid = loanTableCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			loanTableCacheModel.uuid = null;
		}

		loanTableCacheModel.LoanId = getLoanId();

		loanTableCacheModel.customerId = getCustomerId();

		loanTableCacheModel.loanType = getLoanType();

		String loanType = loanTableCacheModel.loanType;

		if ((loanType != null) && (loanType.length() == 0)) {
			loanTableCacheModel.loanType = null;
		}

		loanTableCacheModel.amount = getAmount();

		loanTableCacheModel.status = getStatus();

		String status = loanTableCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			loanTableCacheModel.status = null;
		}

		Date applicationDate = getApplicationDate();

		if (applicationDate != null) {
			loanTableCacheModel.applicationDate = applicationDate.getTime();
		}
		else {
			loanTableCacheModel.applicationDate = Long.MIN_VALUE;
		}

		loanTableCacheModel.interestRate = getInterestRate();

		loanTableCacheModel.tenure = getTenure();

		loanTableCacheModel.remarks = getRemarks();

		String remarks = loanTableCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			loanTableCacheModel.remarks = null;
		}

		loanTableCacheModel.companyId = getCompanyId();

		loanTableCacheModel.userId = getUserId();

		loanTableCacheModel.userName = getUserName();

		String userName = loanTableCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			loanTableCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			loanTableCacheModel.createDate = createDate.getTime();
		}
		else {
			loanTableCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			loanTableCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			loanTableCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return loanTableCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<LoanTable, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<LoanTable, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LoanTable, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((LoanTable)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, LoanTable>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					LoanTable.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _LoanId;
	private long _customerId;
	private String _loanType;
	private double _amount;
	private String _status;
	private Date _applicationDate;
	private double _interestRate;
	private int _tenure;
	private String _remarks;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<LoanTable, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((LoanTable)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("LoanId", _LoanId);
		_columnOriginalValues.put("customerId", _customerId);
		_columnOriginalValues.put("loanType", _loanType);
		_columnOriginalValues.put("amount", _amount);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("applicationDate", _applicationDate);
		_columnOriginalValues.put("interestRate", _interestRate);
		_columnOriginalValues.put("tenure", _tenure);
		_columnOriginalValues.put("remarks", _remarks);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("LoanId", 2L);

		columnBitmasks.put("customerId", 4L);

		columnBitmasks.put("loanType", 8L);

		columnBitmasks.put("amount", 16L);

		columnBitmasks.put("status", 32L);

		columnBitmasks.put("applicationDate", 64L);

		columnBitmasks.put("interestRate", 128L);

		columnBitmasks.put("tenure", 256L);

		columnBitmasks.put("remarks", 512L);

		columnBitmasks.put("companyId", 1024L);

		columnBitmasks.put("userId", 2048L);

		columnBitmasks.put("userName", 4096L);

		columnBitmasks.put("createDate", 8192L);

		columnBitmasks.put("modifiedDate", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private LoanTable _escapedModel;

}