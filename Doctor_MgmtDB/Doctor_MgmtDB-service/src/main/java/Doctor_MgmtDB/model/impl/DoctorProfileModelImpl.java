/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package Doctor_MgmtDB.model.impl;

import Doctor_MgmtDB.model.DoctorProfile;
import Doctor_MgmtDB.model.DoctorProfileModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DoctorProfile service. Represents a row in the &quot;a_DoctorProfile&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DoctorProfileModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DoctorProfileImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DoctorProfileImpl
 * @generated
 */
@JSON(strict = true)
public class DoctorProfileModelImpl
	extends BaseModelImpl<DoctorProfile> implements DoctorProfileModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a doctor profile model instance should use the <code>DoctorProfile</code> interface instead.
	 */
	public static final String TABLE_NAME = "a_DoctorProfile";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"doctorId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"name", Types.VARCHAR}, {"gender", Types.VARCHAR},
		{"dob", Types.TIMESTAMP}, {"email", Types.VARCHAR},
		{"phone", Types.VARCHAR}, {"imageId", Types.BIGINT},
		{"specialization", Types.VARCHAR}, {"qualification", Types.VARCHAR},
		{"experienceYears", Types.INTEGER}, {"languages", Types.VARCHAR},
		{"licenseNumber", Types.VARCHAR}, {"availableDays", Types.VARCHAR},
		{"availableTime", Types.VARCHAR}, {"hospitalLocation", Types.VARCHAR},
		{"consultationMode", Types.VARCHAR}, {"address", Types.VARCHAR},
		{"bio", Types.VARCHAR}, {"fees", Types.DOUBLE}, {"rating", Types.DOUBLE}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("doctorId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("gender", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dob", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("phone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("imageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("specialization", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qualification", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("experienceYears", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("languages", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("licenseNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("availableDays", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("availableTime", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hospitalLocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("consultationMode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bio", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fees", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("rating", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE =
		"create table a_DoctorProfile (uuid_ VARCHAR(75) null,doctorId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,gender VARCHAR(75) null,dob DATE null,email VARCHAR(75) null,phone VARCHAR(75) null,imageId LONG,specialization VARCHAR(75) null,qualification VARCHAR(75) null,experienceYears INTEGER,languages VARCHAR(75) null,licenseNumber VARCHAR(75) null,availableDays VARCHAR(75) null,availableTime VARCHAR(75) null,hospitalLocation VARCHAR(75) null,consultationMode VARCHAR(75) null,address VARCHAR(75) null,bio VARCHAR(75) null,fees DOUBLE,rating DOUBLE)";

	public static final String TABLE_SQL_DROP = "drop table a_DoctorProfile";

	public static final String ORDER_BY_JPQL =
		" ORDER BY doctorProfile.name ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY a_DoctorProfile.name ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NAME_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DoctorProfileModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _doctorId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDoctorId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _doctorId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DoctorProfile.class;
	}

	@Override
	public String getModelClassName() {
		return DoctorProfile.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DoctorProfile, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DoctorProfile, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DoctorProfile, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DoctorProfile)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DoctorProfile, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DoctorProfile, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DoctorProfile)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DoctorProfile, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DoctorProfile, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<DoctorProfile, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<DoctorProfile, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<DoctorProfile, Object>>();

			attributeGetterFunctions.put("uuid", DoctorProfile::getUuid);
			attributeGetterFunctions.put(
				"doctorId", DoctorProfile::getDoctorId);
			attributeGetterFunctions.put("groupId", DoctorProfile::getGroupId);
			attributeGetterFunctions.put(
				"companyId", DoctorProfile::getCompanyId);
			attributeGetterFunctions.put("userId", DoctorProfile::getUserId);
			attributeGetterFunctions.put(
				"userName", DoctorProfile::getUserName);
			attributeGetterFunctions.put(
				"createDate", DoctorProfile::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", DoctorProfile::getModifiedDate);
			attributeGetterFunctions.put("name", DoctorProfile::getName);
			attributeGetterFunctions.put("gender", DoctorProfile::getGender);
			attributeGetterFunctions.put("dob", DoctorProfile::getDob);
			attributeGetterFunctions.put("email", DoctorProfile::getEmail);
			attributeGetterFunctions.put("phone", DoctorProfile::getPhone);
			attributeGetterFunctions.put("imageId", DoctorProfile::getImageId);
			attributeGetterFunctions.put(
				"specialization", DoctorProfile::getSpecialization);
			attributeGetterFunctions.put(
				"qualification", DoctorProfile::getQualification);
			attributeGetterFunctions.put(
				"experienceYears", DoctorProfile::getExperienceYears);
			attributeGetterFunctions.put(
				"languages", DoctorProfile::getLanguages);
			attributeGetterFunctions.put(
				"licenseNumber", DoctorProfile::getLicenseNumber);
			attributeGetterFunctions.put(
				"availableDays", DoctorProfile::getAvailableDays);
			attributeGetterFunctions.put(
				"availableTime", DoctorProfile::getAvailableTime);
			attributeGetterFunctions.put(
				"hospitalLocation", DoctorProfile::getHospitalLocation);
			attributeGetterFunctions.put(
				"consultationMode", DoctorProfile::getConsultationMode);
			attributeGetterFunctions.put("address", DoctorProfile::getAddress);
			attributeGetterFunctions.put("bio", DoctorProfile::getBio);
			attributeGetterFunctions.put("fees", DoctorProfile::getFees);
			attributeGetterFunctions.put("rating", DoctorProfile::getRating);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<DoctorProfile, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<DoctorProfile, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<DoctorProfile, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<DoctorProfile, String>)DoctorProfile::setUuid);
			attributeSetterBiConsumers.put(
				"doctorId",
				(BiConsumer<DoctorProfile, Long>)DoctorProfile::setDoctorId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<DoctorProfile, Long>)DoctorProfile::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<DoctorProfile, Long>)DoctorProfile::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<DoctorProfile, Long>)DoctorProfile::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<DoctorProfile, String>)DoctorProfile::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<DoctorProfile, Date>)DoctorProfile::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<DoctorProfile, Date>)
					DoctorProfile::setModifiedDate);
			attributeSetterBiConsumers.put(
				"name",
				(BiConsumer<DoctorProfile, String>)DoctorProfile::setName);
			attributeSetterBiConsumers.put(
				"gender",
				(BiConsumer<DoctorProfile, String>)DoctorProfile::setGender);
			attributeSetterBiConsumers.put(
				"dob", (BiConsumer<DoctorProfile, Date>)DoctorProfile::setDob);
			attributeSetterBiConsumers.put(
				"email",
				(BiConsumer<DoctorProfile, String>)DoctorProfile::setEmail);
			attributeSetterBiConsumers.put(
				"phone",
				(BiConsumer<DoctorProfile, String>)DoctorProfile::setPhone);
			attributeSetterBiConsumers.put(
				"imageId",
				(BiConsumer<DoctorProfile, Long>)DoctorProfile::setImageId);
			attributeSetterBiConsumers.put(
				"specialization",
				(BiConsumer<DoctorProfile, String>)
					DoctorProfile::setSpecialization);
			attributeSetterBiConsumers.put(
				"qualification",
				(BiConsumer<DoctorProfile, String>)
					DoctorProfile::setQualification);
			attributeSetterBiConsumers.put(
				"experienceYears",
				(BiConsumer<DoctorProfile, Integer>)
					DoctorProfile::setExperienceYears);
			attributeSetterBiConsumers.put(
				"languages",
				(BiConsumer<DoctorProfile, String>)DoctorProfile::setLanguages);
			attributeSetterBiConsumers.put(
				"licenseNumber",
				(BiConsumer<DoctorProfile, String>)
					DoctorProfile::setLicenseNumber);
			attributeSetterBiConsumers.put(
				"availableDays",
				(BiConsumer<DoctorProfile, String>)
					DoctorProfile::setAvailableDays);
			attributeSetterBiConsumers.put(
				"availableTime",
				(BiConsumer<DoctorProfile, String>)
					DoctorProfile::setAvailableTime);
			attributeSetterBiConsumers.put(
				"hospitalLocation",
				(BiConsumer<DoctorProfile, String>)
					DoctorProfile::setHospitalLocation);
			attributeSetterBiConsumers.put(
				"consultationMode",
				(BiConsumer<DoctorProfile, String>)
					DoctorProfile::setConsultationMode);
			attributeSetterBiConsumers.put(
				"address",
				(BiConsumer<DoctorProfile, String>)DoctorProfile::setAddress);
			attributeSetterBiConsumers.put(
				"bio",
				(BiConsumer<DoctorProfile, String>)DoctorProfile::setBio);
			attributeSetterBiConsumers.put(
				"fees",
				(BiConsumer<DoctorProfile, Double>)DoctorProfile::setFees);
			attributeSetterBiConsumers.put(
				"rating",
				(BiConsumer<DoctorProfile, Double>)DoctorProfile::setRating);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getDoctorId() {
		return _doctorId;
	}

	@Override
	public void setDoctorId(long doctorId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_doctorId = doctorId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@JSON
	@Override
	public String getGender() {
		if (_gender == null) {
			return "";
		}
		else {
			return _gender;
		}
	}

	@Override
	public void setGender(String gender) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gender = gender;
	}

	@JSON
	@Override
	public Date getDob() {
		return _dob;
	}

	@Override
	public void setDob(Date dob) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dob = dob;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	@JSON
	@Override
	public String getPhone() {
		if (_phone == null) {
			return "";
		}
		else {
			return _phone;
		}
	}

	@Override
	public void setPhone(String phone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_phone = phone;
	}

	@JSON
	@Override
	public long getImageId() {
		return _imageId;
	}

	@Override
	public void setImageId(long imageId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_imageId = imageId;
	}

	@JSON
	@Override
	public String getSpecialization() {
		if (_specialization == null) {
			return "";
		}
		else {
			return _specialization;
		}
	}

	@Override
	public void setSpecialization(String specialization) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_specialization = specialization;
	}

	@JSON
	@Override
	public String getQualification() {
		if (_qualification == null) {
			return "";
		}
		else {
			return _qualification;
		}
	}

	@Override
	public void setQualification(String qualification) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qualification = qualification;
	}

	@JSON
	@Override
	public int getExperienceYears() {
		return _experienceYears;
	}

	@Override
	public void setExperienceYears(int experienceYears) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_experienceYears = experienceYears;
	}

	@JSON
	@Override
	public String getLanguages() {
		if (_languages == null) {
			return "";
		}
		else {
			return _languages;
		}
	}

	@Override
	public void setLanguages(String languages) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_languages = languages;
	}

	@JSON
	@Override
	public String getLicenseNumber() {
		if (_licenseNumber == null) {
			return "";
		}
		else {
			return _licenseNumber;
		}
	}

	@Override
	public void setLicenseNumber(String licenseNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_licenseNumber = licenseNumber;
	}

	@JSON
	@Override
	public String getAvailableDays() {
		if (_availableDays == null) {
			return "";
		}
		else {
			return _availableDays;
		}
	}

	@Override
	public void setAvailableDays(String availableDays) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_availableDays = availableDays;
	}

	@JSON
	@Override
	public String getAvailableTime() {
		if (_availableTime == null) {
			return "";
		}
		else {
			return _availableTime;
		}
	}

	@Override
	public void setAvailableTime(String availableTime) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_availableTime = availableTime;
	}

	@JSON
	@Override
	public String getHospitalLocation() {
		if (_hospitalLocation == null) {
			return "";
		}
		else {
			return _hospitalLocation;
		}
	}

	@Override
	public void setHospitalLocation(String hospitalLocation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hospitalLocation = hospitalLocation;
	}

	@JSON
	@Override
	public String getConsultationMode() {
		if (_consultationMode == null) {
			return "";
		}
		else {
			return _consultationMode;
		}
	}

	@Override
	public void setConsultationMode(String consultationMode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_consultationMode = consultationMode;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_address = address;
	}

	@JSON
	@Override
	public String getBio() {
		if (_bio == null) {
			return "";
		}
		else {
			return _bio;
		}
	}

	@Override
	public void setBio(String bio) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bio = bio;
	}

	@JSON
	@Override
	public double getFees() {
		return _fees;
	}

	@Override
	public void setFees(double fees) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fees = fees;
	}

	@JSON
	@Override
	public double getRating() {
		return _rating;
	}

	@Override
	public void setRating(double rating) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rating = rating;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(DoctorProfile.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), DoctorProfile.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DoctorProfile toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DoctorProfile>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DoctorProfileImpl doctorProfileImpl = new DoctorProfileImpl();

		doctorProfileImpl.setUuid(getUuid());
		doctorProfileImpl.setDoctorId(getDoctorId());
		doctorProfileImpl.setGroupId(getGroupId());
		doctorProfileImpl.setCompanyId(getCompanyId());
		doctorProfileImpl.setUserId(getUserId());
		doctorProfileImpl.setUserName(getUserName());
		doctorProfileImpl.setCreateDate(getCreateDate());
		doctorProfileImpl.setModifiedDate(getModifiedDate());
		doctorProfileImpl.setName(getName());
		doctorProfileImpl.setGender(getGender());
		doctorProfileImpl.setDob(getDob());
		doctorProfileImpl.setEmail(getEmail());
		doctorProfileImpl.setPhone(getPhone());
		doctorProfileImpl.setImageId(getImageId());
		doctorProfileImpl.setSpecialization(getSpecialization());
		doctorProfileImpl.setQualification(getQualification());
		doctorProfileImpl.setExperienceYears(getExperienceYears());
		doctorProfileImpl.setLanguages(getLanguages());
		doctorProfileImpl.setLicenseNumber(getLicenseNumber());
		doctorProfileImpl.setAvailableDays(getAvailableDays());
		doctorProfileImpl.setAvailableTime(getAvailableTime());
		doctorProfileImpl.setHospitalLocation(getHospitalLocation());
		doctorProfileImpl.setConsultationMode(getConsultationMode());
		doctorProfileImpl.setAddress(getAddress());
		doctorProfileImpl.setBio(getBio());
		doctorProfileImpl.setFees(getFees());
		doctorProfileImpl.setRating(getRating());

		doctorProfileImpl.resetOriginalValues();

		return doctorProfileImpl;
	}

	@Override
	public DoctorProfile cloneWithOriginalValues() {
		DoctorProfileImpl doctorProfileImpl = new DoctorProfileImpl();

		doctorProfileImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		doctorProfileImpl.setDoctorId(
			this.<Long>getColumnOriginalValue("doctorId"));
		doctorProfileImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		doctorProfileImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		doctorProfileImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		doctorProfileImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		doctorProfileImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		doctorProfileImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		doctorProfileImpl.setName(this.<String>getColumnOriginalValue("name"));
		doctorProfileImpl.setGender(
			this.<String>getColumnOriginalValue("gender"));
		doctorProfileImpl.setDob(this.<Date>getColumnOriginalValue("dob"));
		doctorProfileImpl.setEmail(
			this.<String>getColumnOriginalValue("email"));
		doctorProfileImpl.setPhone(
			this.<String>getColumnOriginalValue("phone"));
		doctorProfileImpl.setImageId(
			this.<Long>getColumnOriginalValue("imageId"));
		doctorProfileImpl.setSpecialization(
			this.<String>getColumnOriginalValue("specialization"));
		doctorProfileImpl.setQualification(
			this.<String>getColumnOriginalValue("qualification"));
		doctorProfileImpl.setExperienceYears(
			this.<Integer>getColumnOriginalValue("experienceYears"));
		doctorProfileImpl.setLanguages(
			this.<String>getColumnOriginalValue("languages"));
		doctorProfileImpl.setLicenseNumber(
			this.<String>getColumnOriginalValue("licenseNumber"));
		doctorProfileImpl.setAvailableDays(
			this.<String>getColumnOriginalValue("availableDays"));
		doctorProfileImpl.setAvailableTime(
			this.<String>getColumnOriginalValue("availableTime"));
		doctorProfileImpl.setHospitalLocation(
			this.<String>getColumnOriginalValue("hospitalLocation"));
		doctorProfileImpl.setConsultationMode(
			this.<String>getColumnOriginalValue("consultationMode"));
		doctorProfileImpl.setAddress(
			this.<String>getColumnOriginalValue("address"));
		doctorProfileImpl.setBio(this.<String>getColumnOriginalValue("bio"));
		doctorProfileImpl.setFees(this.<Double>getColumnOriginalValue("fees"));
		doctorProfileImpl.setRating(
			this.<Double>getColumnOriginalValue("rating"));

		return doctorProfileImpl;
	}

	@Override
	public int compareTo(DoctorProfile doctorProfile) {
		int value = 0;

		value = getName().compareTo(doctorProfile.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DoctorProfile)) {
			return false;
		}

		DoctorProfile doctorProfile = (DoctorProfile)object;

		long primaryKey = doctorProfile.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DoctorProfile> toCacheModel() {
		DoctorProfileCacheModel doctorProfileCacheModel =
			new DoctorProfileCacheModel();

		doctorProfileCacheModel.uuid = getUuid();

		String uuid = doctorProfileCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			doctorProfileCacheModel.uuid = null;
		}

		doctorProfileCacheModel.doctorId = getDoctorId();

		doctorProfileCacheModel.groupId = getGroupId();

		doctorProfileCacheModel.companyId = getCompanyId();

		doctorProfileCacheModel.userId = getUserId();

		doctorProfileCacheModel.userName = getUserName();

		String userName = doctorProfileCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			doctorProfileCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			doctorProfileCacheModel.createDate = createDate.getTime();
		}
		else {
			doctorProfileCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			doctorProfileCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			doctorProfileCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		doctorProfileCacheModel.name = getName();

		String name = doctorProfileCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			doctorProfileCacheModel.name = null;
		}

		doctorProfileCacheModel.gender = getGender();

		String gender = doctorProfileCacheModel.gender;

		if ((gender != null) && (gender.length() == 0)) {
			doctorProfileCacheModel.gender = null;
		}

		Date dob = getDob();

		if (dob != null) {
			doctorProfileCacheModel.dob = dob.getTime();
		}
		else {
			doctorProfileCacheModel.dob = Long.MIN_VALUE;
		}

		doctorProfileCacheModel.email = getEmail();

		String email = doctorProfileCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			doctorProfileCacheModel.email = null;
		}

		doctorProfileCacheModel.phone = getPhone();

		String phone = doctorProfileCacheModel.phone;

		if ((phone != null) && (phone.length() == 0)) {
			doctorProfileCacheModel.phone = null;
		}

		doctorProfileCacheModel.imageId = getImageId();

		doctorProfileCacheModel.specialization = getSpecialization();

		String specialization = doctorProfileCacheModel.specialization;

		if ((specialization != null) && (specialization.length() == 0)) {
			doctorProfileCacheModel.specialization = null;
		}

		doctorProfileCacheModel.qualification = getQualification();

		String qualification = doctorProfileCacheModel.qualification;

		if ((qualification != null) && (qualification.length() == 0)) {
			doctorProfileCacheModel.qualification = null;
		}

		doctorProfileCacheModel.experienceYears = getExperienceYears();

		doctorProfileCacheModel.languages = getLanguages();

		String languages = doctorProfileCacheModel.languages;

		if ((languages != null) && (languages.length() == 0)) {
			doctorProfileCacheModel.languages = null;
		}

		doctorProfileCacheModel.licenseNumber = getLicenseNumber();

		String licenseNumber = doctorProfileCacheModel.licenseNumber;

		if ((licenseNumber != null) && (licenseNumber.length() == 0)) {
			doctorProfileCacheModel.licenseNumber = null;
		}

		doctorProfileCacheModel.availableDays = getAvailableDays();

		String availableDays = doctorProfileCacheModel.availableDays;

		if ((availableDays != null) && (availableDays.length() == 0)) {
			doctorProfileCacheModel.availableDays = null;
		}

		doctorProfileCacheModel.availableTime = getAvailableTime();

		String availableTime = doctorProfileCacheModel.availableTime;

		if ((availableTime != null) && (availableTime.length() == 0)) {
			doctorProfileCacheModel.availableTime = null;
		}

		doctorProfileCacheModel.hospitalLocation = getHospitalLocation();

		String hospitalLocation = doctorProfileCacheModel.hospitalLocation;

		if ((hospitalLocation != null) && (hospitalLocation.length() == 0)) {
			doctorProfileCacheModel.hospitalLocation = null;
		}

		doctorProfileCacheModel.consultationMode = getConsultationMode();

		String consultationMode = doctorProfileCacheModel.consultationMode;

		if ((consultationMode != null) && (consultationMode.length() == 0)) {
			doctorProfileCacheModel.consultationMode = null;
		}

		doctorProfileCacheModel.address = getAddress();

		String address = doctorProfileCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			doctorProfileCacheModel.address = null;
		}

		doctorProfileCacheModel.bio = getBio();

		String bio = doctorProfileCacheModel.bio;

		if ((bio != null) && (bio.length() == 0)) {
			doctorProfileCacheModel.bio = null;
		}

		doctorProfileCacheModel.fees = getFees();

		doctorProfileCacheModel.rating = getRating();

		return doctorProfileCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DoctorProfile, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DoctorProfile, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DoctorProfile, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((DoctorProfile)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DoctorProfile>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					DoctorProfile.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _doctorId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _name;
	private String _gender;
	private Date _dob;
	private String _email;
	private String _phone;
	private long _imageId;
	private String _specialization;
	private String _qualification;
	private int _experienceYears;
	private String _languages;
	private String _licenseNumber;
	private String _availableDays;
	private String _availableTime;
	private String _hospitalLocation;
	private String _consultationMode;
	private String _address;
	private String _bio;
	private double _fees;
	private double _rating;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<DoctorProfile, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DoctorProfile)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("doctorId", _doctorId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("gender", _gender);
		_columnOriginalValues.put("dob", _dob);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put("phone", _phone);
		_columnOriginalValues.put("imageId", _imageId);
		_columnOriginalValues.put("specialization", _specialization);
		_columnOriginalValues.put("qualification", _qualification);
		_columnOriginalValues.put("experienceYears", _experienceYears);
		_columnOriginalValues.put("languages", _languages);
		_columnOriginalValues.put("licenseNumber", _licenseNumber);
		_columnOriginalValues.put("availableDays", _availableDays);
		_columnOriginalValues.put("availableTime", _availableTime);
		_columnOriginalValues.put("hospitalLocation", _hospitalLocation);
		_columnOriginalValues.put("consultationMode", _consultationMode);
		_columnOriginalValues.put("address", _address);
		_columnOriginalValues.put("bio", _bio);
		_columnOriginalValues.put("fees", _fees);
		_columnOriginalValues.put("rating", _rating);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("doctorId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("name", 256L);

		columnBitmasks.put("gender", 512L);

		columnBitmasks.put("dob", 1024L);

		columnBitmasks.put("email", 2048L);

		columnBitmasks.put("phone", 4096L);

		columnBitmasks.put("imageId", 8192L);

		columnBitmasks.put("specialization", 16384L);

		columnBitmasks.put("qualification", 32768L);

		columnBitmasks.put("experienceYears", 65536L);

		columnBitmasks.put("languages", 131072L);

		columnBitmasks.put("licenseNumber", 262144L);

		columnBitmasks.put("availableDays", 524288L);

		columnBitmasks.put("availableTime", 1048576L);

		columnBitmasks.put("hospitalLocation", 2097152L);

		columnBitmasks.put("consultationMode", 4194304L);

		columnBitmasks.put("address", 8388608L);

		columnBitmasks.put("bio", 16777216L);

		columnBitmasks.put("fees", 33554432L);

		columnBitmasks.put("rating", 67108864L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private DoctorProfile _escapedModel;

}