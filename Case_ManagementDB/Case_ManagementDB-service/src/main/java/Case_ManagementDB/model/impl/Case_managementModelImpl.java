/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package Case_ManagementDB.model.impl;

import Case_ManagementDB.model.Case_management;
import Case_ManagementDB.model.Case_managementModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Case_management service. Represents a row in the &quot;a_Case_management&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>Case_managementModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Case_managementImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Case_managementImpl
 * @generated
 */
@JSON(strict = true)
public class Case_managementModelImpl
	extends BaseModelImpl<Case_management> implements Case_managementModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a case_management model instance should use the <code>Case_management</code> interface instead.
	 */
	public static final String TABLE_NAME = "a_Case_management";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"caseId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"patientId", Types.BIGINT}, {"doctorId", Types.BIGINT},
		{"doctorUserId", Types.BIGINT}, {"caseTitle", Types.VARCHAR},
		{"notes", Types.VARCHAR}, {"status", Types.VARCHAR},
		{"bloodPressure", Types.VARCHAR}, {"height", Types.DOUBLE},
		{"weight", Types.DOUBLE}, {"diagnosis", Types.VARCHAR},
		{"treatment", Types.VARCHAR}, {"consultationFee", Types.DOUBLE},
		{"medicineCharges", Types.DOUBLE}, {"testCharges", Types.DOUBLE},
		{"totalAmount", Types.DOUBLE}, {"paymentStatus", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("caseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("patientId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("doctorId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("doctorUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("caseTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("notes", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bloodPressure", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("height", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("weight", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("diagnosis", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("treatment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("consultationFee", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("medicineCharges", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("testCharges", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("totalAmount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("paymentStatus", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table a_Case_management (uuid_ VARCHAR(75) null,caseId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,patientId LONG,doctorId LONG,doctorUserId LONG,caseTitle VARCHAR(75) null,notes VARCHAR(75) null,status VARCHAR(75) null,bloodPressure VARCHAR(75) null,height DOUBLE,weight DOUBLE,diagnosis VARCHAR(75) null,treatment VARCHAR(75) null,consultationFee DOUBLE,medicineCharges DOUBLE,testCharges DOUBLE,totalAmount DOUBLE,paymentStatus VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table a_Case_management";

	public static final String ORDER_BY_JPQL =
		" ORDER BY case_management.caseTitle ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY a_Case_management.caseTitle ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DOCTORUSERID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASETITLE_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public Case_managementModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _caseId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCaseId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _caseId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Case_management.class;
	}

	@Override
	public String getModelClassName() {
		return Case_management.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Case_management, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Case_management, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Case_management, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Case_management)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Case_management, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Case_management, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Case_management)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Case_management, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Case_management, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Case_management, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Case_management, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<Case_management, Object>>();

			attributeGetterFunctions.put("uuid", Case_management::getUuid);
			attributeGetterFunctions.put("caseId", Case_management::getCaseId);
			attributeGetterFunctions.put(
				"groupId", Case_management::getGroupId);
			attributeGetterFunctions.put(
				"companyId", Case_management::getCompanyId);
			attributeGetterFunctions.put("userId", Case_management::getUserId);
			attributeGetterFunctions.put(
				"userName", Case_management::getUserName);
			attributeGetterFunctions.put(
				"createDate", Case_management::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", Case_management::getModifiedDate);
			attributeGetterFunctions.put(
				"patientId", Case_management::getPatientId);
			attributeGetterFunctions.put(
				"doctorId", Case_management::getDoctorId);
			attributeGetterFunctions.put(
				"doctorUserId", Case_management::getDoctorUserId);
			attributeGetterFunctions.put(
				"caseTitle", Case_management::getCaseTitle);
			attributeGetterFunctions.put("notes", Case_management::getNotes);
			attributeGetterFunctions.put("status", Case_management::getStatus);
			attributeGetterFunctions.put(
				"bloodPressure", Case_management::getBloodPressure);
			attributeGetterFunctions.put("height", Case_management::getHeight);
			attributeGetterFunctions.put("weight", Case_management::getWeight);
			attributeGetterFunctions.put(
				"diagnosis", Case_management::getDiagnosis);
			attributeGetterFunctions.put(
				"treatment", Case_management::getTreatment);
			attributeGetterFunctions.put(
				"consultationFee", Case_management::getConsultationFee);
			attributeGetterFunctions.put(
				"medicineCharges", Case_management::getMedicineCharges);
			attributeGetterFunctions.put(
				"testCharges", Case_management::getTestCharges);
			attributeGetterFunctions.put(
				"totalAmount", Case_management::getTotalAmount);
			attributeGetterFunctions.put(
				"paymentStatus", Case_management::getPaymentStatus);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Case_management, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Case_management, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<Case_management, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<Case_management, String>)Case_management::setUuid);
			attributeSetterBiConsumers.put(
				"caseId",
				(BiConsumer<Case_management, Long>)Case_management::setCaseId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<Case_management, Long>)Case_management::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<Case_management, Long>)
					Case_management::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<Case_management, Long>)Case_management::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<Case_management, String>)
					Case_management::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<Case_management, Date>)
					Case_management::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<Case_management, Date>)
					Case_management::setModifiedDate);
			attributeSetterBiConsumers.put(
				"patientId",
				(BiConsumer<Case_management, Long>)
					Case_management::setPatientId);
			attributeSetterBiConsumers.put(
				"doctorId",
				(BiConsumer<Case_management, Long>)
					Case_management::setDoctorId);
			attributeSetterBiConsumers.put(
				"doctorUserId",
				(BiConsumer<Case_management, Long>)
					Case_management::setDoctorUserId);
			attributeSetterBiConsumers.put(
				"caseTitle",
				(BiConsumer<Case_management, String>)
					Case_management::setCaseTitle);
			attributeSetterBiConsumers.put(
				"notes",
				(BiConsumer<Case_management, String>)Case_management::setNotes);
			attributeSetterBiConsumers.put(
				"status",
				(BiConsumer<Case_management, String>)
					Case_management::setStatus);
			attributeSetterBiConsumers.put(
				"bloodPressure",
				(BiConsumer<Case_management, String>)
					Case_management::setBloodPressure);
			attributeSetterBiConsumers.put(
				"height",
				(BiConsumer<Case_management, Double>)
					Case_management::setHeight);
			attributeSetterBiConsumers.put(
				"weight",
				(BiConsumer<Case_management, Double>)
					Case_management::setWeight);
			attributeSetterBiConsumers.put(
				"diagnosis",
				(BiConsumer<Case_management, String>)
					Case_management::setDiagnosis);
			attributeSetterBiConsumers.put(
				"treatment",
				(BiConsumer<Case_management, String>)
					Case_management::setTreatment);
			attributeSetterBiConsumers.put(
				"consultationFee",
				(BiConsumer<Case_management, Double>)
					Case_management::setConsultationFee);
			attributeSetterBiConsumers.put(
				"medicineCharges",
				(BiConsumer<Case_management, Double>)
					Case_management::setMedicineCharges);
			attributeSetterBiConsumers.put(
				"testCharges",
				(BiConsumer<Case_management, Double>)
					Case_management::setTestCharges);
			attributeSetterBiConsumers.put(
				"totalAmount",
				(BiConsumer<Case_management, Double>)
					Case_management::setTotalAmount);
			attributeSetterBiConsumers.put(
				"paymentStatus",
				(BiConsumer<Case_management, String>)
					Case_management::setPaymentStatus);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getCaseId() {
		return _caseId;
	}

	@Override
	public void setCaseId(long caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getPatientId() {
		return _patientId;
	}

	@Override
	public void setPatientId(long patientId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_patientId = patientId;
	}

	@JSON
	@Override
	public long getDoctorId() {
		return _doctorId;
	}

	@Override
	public void setDoctorId(long doctorId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_doctorId = doctorId;
	}

	@JSON
	@Override
	public long getDoctorUserId() {
		return _doctorUserId;
	}

	@Override
	public void setDoctorUserId(long doctorUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_doctorUserId = doctorUserId;
	}

	@Override
	public String getDoctorUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getDoctorUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setDoctorUserUuid(String doctorUserUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalDoctorUserId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("doctorUserId"));
	}

	@JSON
	@Override
	public String getCaseTitle() {
		if (_caseTitle == null) {
			return "";
		}
		else {
			return _caseTitle;
		}
	}

	@Override
	public void setCaseTitle(String caseTitle) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseTitle = caseTitle;
	}

	@JSON
	@Override
	public String getNotes() {
		if (_notes == null) {
			return "";
		}
		else {
			return _notes;
		}
	}

	@Override
	public void setNotes(String notes) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_notes = notes;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public String getBloodPressure() {
		if (_bloodPressure == null) {
			return "";
		}
		else {
			return _bloodPressure;
		}
	}

	@Override
	public void setBloodPressure(String bloodPressure) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bloodPressure = bloodPressure;
	}

	@JSON
	@Override
	public double getHeight() {
		return _height;
	}

	@Override
	public void setHeight(double height) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_height = height;
	}

	@JSON
	@Override
	public double getWeight() {
		return _weight;
	}

	@Override
	public void setWeight(double weight) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_weight = weight;
	}

	@JSON
	@Override
	public String getDiagnosis() {
		if (_diagnosis == null) {
			return "";
		}
		else {
			return _diagnosis;
		}
	}

	@Override
	public void setDiagnosis(String diagnosis) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_diagnosis = diagnosis;
	}

	@JSON
	@Override
	public String getTreatment() {
		if (_treatment == null) {
			return "";
		}
		else {
			return _treatment;
		}
	}

	@Override
	public void setTreatment(String treatment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_treatment = treatment;
	}

	@JSON
	@Override
	public double getConsultationFee() {
		return _consultationFee;
	}

	@Override
	public void setConsultationFee(double consultationFee) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_consultationFee = consultationFee;
	}

	@JSON
	@Override
	public double getMedicineCharges() {
		return _medicineCharges;
	}

	@Override
	public void setMedicineCharges(double medicineCharges) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_medicineCharges = medicineCharges;
	}

	@JSON
	@Override
	public double getTestCharges() {
		return _testCharges;
	}

	@Override
	public void setTestCharges(double testCharges) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_testCharges = testCharges;
	}

	@JSON
	@Override
	public double getTotalAmount() {
		return _totalAmount;
	}

	@Override
	public void setTotalAmount(double totalAmount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalAmount = totalAmount;
	}

	@JSON
	@Override
	public String getPaymentStatus() {
		if (_paymentStatus == null) {
			return "";
		}
		else {
			return _paymentStatus;
		}
	}

	@Override
	public void setPaymentStatus(String paymentStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_paymentStatus = paymentStatus;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Case_management.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Case_management.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Case_management toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Case_management>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		Case_managementImpl case_managementImpl = new Case_managementImpl();

		case_managementImpl.setUuid(getUuid());
		case_managementImpl.setCaseId(getCaseId());
		case_managementImpl.setGroupId(getGroupId());
		case_managementImpl.setCompanyId(getCompanyId());
		case_managementImpl.setUserId(getUserId());
		case_managementImpl.setUserName(getUserName());
		case_managementImpl.setCreateDate(getCreateDate());
		case_managementImpl.setModifiedDate(getModifiedDate());
		case_managementImpl.setPatientId(getPatientId());
		case_managementImpl.setDoctorId(getDoctorId());
		case_managementImpl.setDoctorUserId(getDoctorUserId());
		case_managementImpl.setCaseTitle(getCaseTitle());
		case_managementImpl.setNotes(getNotes());
		case_managementImpl.setStatus(getStatus());
		case_managementImpl.setBloodPressure(getBloodPressure());
		case_managementImpl.setHeight(getHeight());
		case_managementImpl.setWeight(getWeight());
		case_managementImpl.setDiagnosis(getDiagnosis());
		case_managementImpl.setTreatment(getTreatment());
		case_managementImpl.setConsultationFee(getConsultationFee());
		case_managementImpl.setMedicineCharges(getMedicineCharges());
		case_managementImpl.setTestCharges(getTestCharges());
		case_managementImpl.setTotalAmount(getTotalAmount());
		case_managementImpl.setPaymentStatus(getPaymentStatus());

		case_managementImpl.resetOriginalValues();

		return case_managementImpl;
	}

	@Override
	public Case_management cloneWithOriginalValues() {
		Case_managementImpl case_managementImpl = new Case_managementImpl();

		case_managementImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		case_managementImpl.setCaseId(
			this.<Long>getColumnOriginalValue("caseId"));
		case_managementImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		case_managementImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		case_managementImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		case_managementImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		case_managementImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		case_managementImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		case_managementImpl.setPatientId(
			this.<Long>getColumnOriginalValue("patientId"));
		case_managementImpl.setDoctorId(
			this.<Long>getColumnOriginalValue("doctorId"));
		case_managementImpl.setDoctorUserId(
			this.<Long>getColumnOriginalValue("doctorUserId"));
		case_managementImpl.setCaseTitle(
			this.<String>getColumnOriginalValue("caseTitle"));
		case_managementImpl.setNotes(
			this.<String>getColumnOriginalValue("notes"));
		case_managementImpl.setStatus(
			this.<String>getColumnOriginalValue("status"));
		case_managementImpl.setBloodPressure(
			this.<String>getColumnOriginalValue("bloodPressure"));
		case_managementImpl.setHeight(
			this.<Double>getColumnOriginalValue("height"));
		case_managementImpl.setWeight(
			this.<Double>getColumnOriginalValue("weight"));
		case_managementImpl.setDiagnosis(
			this.<String>getColumnOriginalValue("diagnosis"));
		case_managementImpl.setTreatment(
			this.<String>getColumnOriginalValue("treatment"));
		case_managementImpl.setConsultationFee(
			this.<Double>getColumnOriginalValue("consultationFee"));
		case_managementImpl.setMedicineCharges(
			this.<Double>getColumnOriginalValue("medicineCharges"));
		case_managementImpl.setTestCharges(
			this.<Double>getColumnOriginalValue("testCharges"));
		case_managementImpl.setTotalAmount(
			this.<Double>getColumnOriginalValue("totalAmount"));
		case_managementImpl.setPaymentStatus(
			this.<String>getColumnOriginalValue("paymentStatus"));

		return case_managementImpl;
	}

	@Override
	public int compareTo(Case_management case_management) {
		int value = 0;

		value = getCaseTitle().compareTo(case_management.getCaseTitle());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Case_management)) {
			return false;
		}

		Case_management case_management = (Case_management)object;

		long primaryKey = case_management.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Case_management> toCacheModel() {
		Case_managementCacheModel case_managementCacheModel =
			new Case_managementCacheModel();

		case_managementCacheModel.uuid = getUuid();

		String uuid = case_managementCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			case_managementCacheModel.uuid = null;
		}

		case_managementCacheModel.caseId = getCaseId();

		case_managementCacheModel.groupId = getGroupId();

		case_managementCacheModel.companyId = getCompanyId();

		case_managementCacheModel.userId = getUserId();

		case_managementCacheModel.userName = getUserName();

		String userName = case_managementCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			case_managementCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			case_managementCacheModel.createDate = createDate.getTime();
		}
		else {
			case_managementCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			case_managementCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			case_managementCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		case_managementCacheModel.patientId = getPatientId();

		case_managementCacheModel.doctorId = getDoctorId();

		case_managementCacheModel.doctorUserId = getDoctorUserId();

		case_managementCacheModel.caseTitle = getCaseTitle();

		String caseTitle = case_managementCacheModel.caseTitle;

		if ((caseTitle != null) && (caseTitle.length() == 0)) {
			case_managementCacheModel.caseTitle = null;
		}

		case_managementCacheModel.notes = getNotes();

		String notes = case_managementCacheModel.notes;

		if ((notes != null) && (notes.length() == 0)) {
			case_managementCacheModel.notes = null;
		}

		case_managementCacheModel.status = getStatus();

		String status = case_managementCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			case_managementCacheModel.status = null;
		}

		case_managementCacheModel.bloodPressure = getBloodPressure();

		String bloodPressure = case_managementCacheModel.bloodPressure;

		if ((bloodPressure != null) && (bloodPressure.length() == 0)) {
			case_managementCacheModel.bloodPressure = null;
		}

		case_managementCacheModel.height = getHeight();

		case_managementCacheModel.weight = getWeight();

		case_managementCacheModel.diagnosis = getDiagnosis();

		String diagnosis = case_managementCacheModel.diagnosis;

		if ((diagnosis != null) && (diagnosis.length() == 0)) {
			case_managementCacheModel.diagnosis = null;
		}

		case_managementCacheModel.treatment = getTreatment();

		String treatment = case_managementCacheModel.treatment;

		if ((treatment != null) && (treatment.length() == 0)) {
			case_managementCacheModel.treatment = null;
		}

		case_managementCacheModel.consultationFee = getConsultationFee();

		case_managementCacheModel.medicineCharges = getMedicineCharges();

		case_managementCacheModel.testCharges = getTestCharges();

		case_managementCacheModel.totalAmount = getTotalAmount();

		case_managementCacheModel.paymentStatus = getPaymentStatus();

		String paymentStatus = case_managementCacheModel.paymentStatus;

		if ((paymentStatus != null) && (paymentStatus.length() == 0)) {
			case_managementCacheModel.paymentStatus = null;
		}

		return case_managementCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Case_management, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Case_management, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Case_management, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Case_management)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Case_management>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Case_management.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _caseId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _patientId;
	private long _doctorId;
	private long _doctorUserId;
	private String _caseTitle;
	private String _notes;
	private String _status;
	private String _bloodPressure;
	private double _height;
	private double _weight;
	private String _diagnosis;
	private String _treatment;
	private double _consultationFee;
	private double _medicineCharges;
	private double _testCharges;
	private double _totalAmount;
	private String _paymentStatus;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Case_management, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Case_management)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("caseId", _caseId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("patientId", _patientId);
		_columnOriginalValues.put("doctorId", _doctorId);
		_columnOriginalValues.put("doctorUserId", _doctorUserId);
		_columnOriginalValues.put("caseTitle", _caseTitle);
		_columnOriginalValues.put("notes", _notes);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("bloodPressure", _bloodPressure);
		_columnOriginalValues.put("height", _height);
		_columnOriginalValues.put("weight", _weight);
		_columnOriginalValues.put("diagnosis", _diagnosis);
		_columnOriginalValues.put("treatment", _treatment);
		_columnOriginalValues.put("consultationFee", _consultationFee);
		_columnOriginalValues.put("medicineCharges", _medicineCharges);
		_columnOriginalValues.put("testCharges", _testCharges);
		_columnOriginalValues.put("totalAmount", _totalAmount);
		_columnOriginalValues.put("paymentStatus", _paymentStatus);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("caseId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("patientId", 256L);

		columnBitmasks.put("doctorId", 512L);

		columnBitmasks.put("doctorUserId", 1024L);

		columnBitmasks.put("caseTitle", 2048L);

		columnBitmasks.put("notes", 4096L);

		columnBitmasks.put("status", 8192L);

		columnBitmasks.put("bloodPressure", 16384L);

		columnBitmasks.put("height", 32768L);

		columnBitmasks.put("weight", 65536L);

		columnBitmasks.put("diagnosis", 131072L);

		columnBitmasks.put("treatment", 262144L);

		columnBitmasks.put("consultationFee", 524288L);

		columnBitmasks.put("medicineCharges", 1048576L);

		columnBitmasks.put("testCharges", 2097152L);

		columnBitmasks.put("totalAmount", 4194304L);

		columnBitmasks.put("paymentStatus", 8388608L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Case_management _escapedModel;

}